name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # Separate job for testing to improve workflow reliability
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
          
    - name: Install dependencies
      run: |
        echo "Installing dependencies..."
        npm ci --prefer-offline --no-audit
        echo "Dependencies installed successfully"
        
    - name: Run linting
      run: |
        echo "Running ESLint..."
        npm run lint
        echo "Linting completed successfully"
        
    - name: Run tests
      run: |
        echo "Running test suite..."
        npm test
        echo "All tests passed successfully"
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          coverage/
          test-results.xml
        retention-days: 7

  # Build and deploy job (only runs if tests pass)
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
          
    - name: Install dependencies
      run: |
        echo "Installing dependencies for build..."
        npm ci --prefer-offline --no-audit
        echo "Dependencies installed successfully"
        
    - name: Build application
      run: |
        echo "Building application for production..."
        echo "Build environment: production"
        echo "Base path: /tiketareact/"
        npm run build
        echo "Build completed successfully"
        
    - name: Verify build artifacts
      run: |
        echo "Verifying build artifacts..."
        if [ ! -d "dist" ]; then
          echo "‚ùå Error: dist directory not found"
          exit 1
        fi
        
        if [ ! -f "dist/index.html" ]; then
          echo "‚ùå Error: index.html not found in dist"
          exit 1
        fi
        
        echo "üìÅ Build artifacts:"
        ls -la dist/
        
        echo "üìÑ index.html content preview:"
        head -20 dist/index.html
        
        echo "‚úÖ Build artifacts verified successfully"
        
    - name: Setup GitHub Pages
      uses: actions/configure-pages@v5
      
    - name: Upload build artifacts
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Verify deployment
      run: |
        echo "üöÄ Deployment completed!"
        echo "üìç Site URL: ${{ steps.deployment.outputs.page_url }}"
        echo "‚è∞ Deployed at: $(date)"
        
        # Wait a moment for deployment to propagate
        echo "Waiting for deployment to propagate..."
        sleep 30
        
        # Basic health check
        echo "Performing basic health check..."
        if curl -f -s "${{ steps.deployment.outputs.page_url }}" > /dev/null; then
          echo "‚úÖ Site is responding successfully"
        else
          echo "‚ö†Ô∏è  Warning: Site may not be immediately available (this is normal)"
        fi
        
    - name: Post deployment summary
      if: always()
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Site URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Node.js Version**: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Tool**: Vite" >> $GITHUB_STEP_SUMMARY
        echo "- **Base Path**: /tiketareact/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" = "success" ]; then
          echo "### ‚úÖ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "The application has been successfully deployed to GitHub Pages." >> $GITHUB_STEP_SUMMARY
          echo "You can access it at: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "The deployment encountered issues. Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Create deployment status issue
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = `üö® Deployment Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `## Deployment Failure Report
          
          **Workflow**: ${{ github.workflow }}
          **Run ID**: ${{ github.run_id }}
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          **Actor**: ${{ github.actor }}
          **Timestamp**: ${new Date().toISOString()}
          
          ### Failure Details
          The deployment workflow failed during execution. Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed error information.
          
          ### Quick Actions
          - [ ] Check workflow logs for specific error messages
          - [ ] Verify build configuration
          - [ ] Test build locally with \`npm run build:verify\`
          - [ ] Check for any recent changes that might have caused the issue
          
          ### Troubleshooting Steps
          1. **Local Testing**: Run \`npm run build && npm run verify-build\` locally
          2. **Dependencies**: Check if any dependencies need updating
          3. **Configuration**: Verify Vite and GitHub Pages configuration
          4. **Assets**: Ensure all assets are properly referenced
          
          This issue was automatically created by the deployment workflow.
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['deployment', 'bug', 'automated']
          });
          
    - name: Notify deployment success
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          // Create a success comment on the latest commit
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: '${{ github.sha }}',
            body: `üöÄ **Deployment Successful!**
            
            Your changes have been deployed to GitHub Pages.
            
            **üåê Live Site**: ${{ steps.deployment.outputs.page_url }}
            **‚è∞ Deployed**: ${new Date().toISOString()}
            **üì¶ Build Size**: Check workflow logs for details
            
            All deployment verifications passed successfully! ‚úÖ`
          });

  # PR preview job (only for pull requests)
  pr-preview:
    name: PR Preview Check
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: Build for preview
      run: |
        echo "Building PR preview..."
        npm run build
        echo "PR preview build completed"
        
    - name: Upload PR preview artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pr-preview-${{ github.event.number }}
        path: dist/
        retention-days: 7
        
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## üîç PR Preview Build
            
            ‚úÖ Build completed successfully for commit ${{ github.sha }}
            
            üì¶ Preview artifacts have been generated and are available for download.
            
            ### Build Details
            - **Node.js**: ${{ env.NODE_VERSION }}
            - **Build Tool**: Vite  
            - **Status**: Success
            
            The build artifacts are available for 7 days.`
          })